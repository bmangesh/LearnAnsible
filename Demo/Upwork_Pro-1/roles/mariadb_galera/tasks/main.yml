---
# tasks for ansible-disable-selinux
- name: Install libselinux as prerequisite for SELinux Ansible module
  yum:
    name: "{{item}}"
    state: latest
  with_items:
    - libselinux-python
    - libsemanage-python
- name: Install mysql_secure_installation rereuisite for Ansible module
  yum:
    name: "{{item}}"
    state: latest
  with_items:
    - MySQL-python

- name: Disable SELinux at next reboot
  selinux:
    state: disabled

- name: Set SELinux in permissive mode until the machine is rebooted
  command: setenforce 0
  ignore_errors: true
  changed_when: false

- name: Copy mariadb.repo to all nodes
  copy:
    src: ../files/mariadb.repo
    dest: /etc/yum.repos.d/

- name: Install MariaDB server,client,galera and rsync packages
  yum: name="{{ item }}" state=present
  with_items:
      - MariaDB-server
      - MariaDB-client
      - galera
      - rsync   

- name: Start MariaDB Service
  service: name=mariadb state=restarted enabled=yes

- name: Copy Galera Configuration file across cluster node
  template: src=../templets/server.cnf.j2 dest=/etc/my.cnf.d/server.cnf owner=root group=root mode=0644

# create root .my.cnf config file
- name: Add .my.cnf
  template: src=../templets/my.cnf.j2 dest=/root/.my.cnf owner=root group=root mode=0777

# This command will fail when the root password was set previously
- name: Check if root password is set
  shell: >
    mysqladmin -u root status
  changed_when: false
  failed_when: false
  register: root_pwd_check
  tags: mariadb

- name: Set MariaDB root password for the first time (root@localhost)
  mysql_user:
    name: root
    password: "{{ password }}"
    host: localhost
    state: present

- name: Set the root password
  mysql_user: login_user=root login_password="{{ password }}" user=root password="{{ password }}"

- name: delete /root/.my.cnf file
  file: path=/root/.my.cnf state=absent

- name: Stop MariaDB Service
  service: name=mariadb state=stopped
  when: inventory_hostname == "server-1"

- name: Start Galera on Master
  shell: galera_new_cluster
  when: inventory_hostname == "server-1"

- name: restart MariaDB Service on Nodes
  service: name=mariadb state=restarted enabled=yes
  when: inventory_hostname == "server-2"

- name: restart MariaDB Service on Nodes
  service: name=mariadb state=restarted enabled=yes
  when: inventory_hostname == "server-3"
